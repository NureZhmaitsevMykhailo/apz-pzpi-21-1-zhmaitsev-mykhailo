1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ

IoT частина системи взаємодіє з одним типом користувачів: клієнти (пацієнти). Пряма взаємодія з користувачами відбувається за допомогою монітора, на який виводиться інформація, та контейнер, куди пацієнт отримує ліки.
Взаємодія користувачів з IoT частиною системи представлено на діаграмі прецедентів (рис. 1).

2 ПРОГРАМНА РЕАЛІЗАЦІЯ

Для демонстрації функціональних можливостей IoT частини системи, було вирішено реалізувати програмний код мовою програмування C#, що максимально відповідає обмеженням апаратних ресурсів IoT пристроїв. Для виведення інформації використовую консольний інтерфейс (CLI). Надсилання даних реалізовано за допомогою бібліотеки System.Net.Http, а сами дані передаються у форматі JSON.
Програма призначена для тривалого доступу на сервері, де існує таблиця з ідентифікаторами, які можна присвоїти IoT пристрою. Це надає можливість зменшити час на обслуговування термiналiв OncoBound.
Код програми написано з мінімальною кількістю рядків для оптимізації під пристрої з обмеженою потужністю. Крім того, програма легко портується на реальні IoT пристрої.

3 ТЕХНОЛОГІЇ ТА АРХІТЕКТУРНІ РІШЕННЯ

Для написання IoT частини системи було обрано мову програмування C#. Компіляція відбувається за допомогою CLR компоненту .NET 8.
Для створення запитів використовується бібліотека System.Net.Http. Для парсингу об’єктів було використано бібліотеки System.Text.Json та Newtonsoft.Json. Для більш детальної візуалізації використаних технологій було розроблено діаграму пакетів (див. рис. 2).
Для більш детальної візуалізації взаємодії пристрою з користувачами системи було розроблено діаграму взаємодії (див. додат. А.1).
Також було побудовано діаграму діяльності, що відображає взаємодію пристрою з сервером (див. додат. Б.1).
Приклади коду IoT частини системи представлено у додатку В.

ВИСНОВКИ
У ході виконання лабораторної роботи були отримані навички з проєктування IoT частини програмної системи. Результатом роботи є розроблена програмна реалізація IoT програмної частини. При розробці продукту було дотримано вимог чистого коду мови програмування C#.
